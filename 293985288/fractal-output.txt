Script started on Mon Dec  2 15:12:21 2024
]0;jpacheco@:~/fractal[?1034h[jpacheco@r2v02 fractal]$ ./  fra  ractua  al  _  cuda                  cd    vim fract al     ctal  .cu
[?1049h[?1h=[2;1H½[6n[2;1H  [1;1H]11;?[1;41r[?12;25h[?12l[?25h[27m[m[H[2J[?25l[41;1H"fractal.cu" 187L, 6118C[>c[1;3H[32mdim3[m [36mblockDim[m([31m32[m, [31m32[m, [31m1[m);
  [32mdim3[m [36mgridDim[m((width + [36mblockDim[m.x - [31m1[m) / [36mblockDim[m.x, (height + [36mblockDim[m.y --[3;1H [31m1[m)/ [36mblockDim[m.y, num_frames);

  GET_TIME(start);
  computeFractalParallel <<<[36mgridDim[m, [36mblockDim[m>>> (num_frames, height, width,,[7;1H aspect_ratio, d_pic);
  cudaDeviceSynchronize();
  GET_TIME(end);
  printf([31m"Parallel compute time: [m[35m%.6f[m[31m s[m[35m\n[m[31m"[m, end - start);
  cudaMemcpy(pic, d_pic, height * width * num_frames * [38;5;130msizeof[m([32munsigned[m [32mchar[m))[12;1H, [31mcudaMemcpyDeviceToHost[m);

  [34m// Serial Program Run time 
[m  [34m/* start time */[m
  GET_TIME(start);
  [34m// /* compute frames */[m
  computeFractalSerial(height, width, num_frames, aspect_ratio, pic);
  [34m// /* end time */[m
  GET_TIME(end);
  [32mdouble[m elapsed = end - start;
  printf([31m"Serial compute time: [m[35m%.6f[m[31m s[m[35m\n[m[31m"[m, elapsed);

  [34m/* write frames to BMP files */[m
  [38;5;130mif[m ((width <= [31m320[m) && (num_frames <= [31m100[m)) { [34m/* do not write if images larr[26;1Hge or many */[m
    [38;5;130mfor[m ([32mint[m frame = [31m0[m; frame < num_frames; frame++) {[28;7H[32mchar[m name[[31m32[m];[29;7Hsprintf(name, [31m"fractal[m[35m%d[m[31m.bmp"[m, frame + [31m1000[m);[30;7HwriteBMP(width, height, &pic[frame * height * width], name);
    }
  }
[32mcudaError_t[m err = cudaGetLastError();
[38;5;130mif[m (err != [31mcudaSuccess[m) {
    printf([31m"CUDA Error: [m[35m%s\n[m[31m"[m, cudaGetErrorString(err));
}
  cudaFree(d_pic);
  free(pic);
  [38;5;130mreturn[m [31m0[m;
} [34m/* main */[m[41;59H176,7[9CBot[29;7H[?12l[?25h[?25l[41;61H5[28;7H[?12l[?25h[?25l[41;61H4[27;7H[?12l[?25h[?25l[25;7H[106m([12C)[m[55C[34mrr[26;1Hg[m[41;61H3[25;7H[?12l[?25h[?25l([12C)[55C[34mrr[26;1Hg[m[41;61H2[24;7H[?12l[?25h[?25l[41;61H1,0-1[23;1H[?12l[?25h[?25l[41;61H0,7  [22;7H[?12l[?25h[?25l[41;60H69[21;7H[?12l[?25h[?25l[41;61H8[20;7H[?12l[?25h[?25l[41;61H7[19;7H[?12l[?25h[?25l[41;61H6[18;7H[?12l[?25h[?25l[41;61H5[17;7H[?12l[?25h[?25l[41;61H4[16;7H[?12l[?25h[?25l[41;61H3[15;7H[?12l[?25h[?25l[41;61H2[14;7H[?12l[?25h[?25l[41;61H1,0-1[13;1H[?12l[?25h[?25l[41;61H0,7  [11;7H[?12l[?25h[?25l[41;60H59[10;7H[?12l[?25h[?25l[41;61H8[9;7H[?12l[?25h[?25l[41;61H7[8;7H[?12l[?25h[?25l[41;61H6[6;7H[?12l[?25h[?25l[41;61H5[5;7H[?12l[?25h[?25l[41;61H4,3[4;3H[?12l[?25h[?25l[41;61H3,7[2;7H[?12l[?25h[?25l[41;61H2[1;7H[?12l[?25h[?25l[1;40r[1;1H[L[1;41r[1;3H[34m// Parallel Program Run time[m[41;1H[K[41;59H151,7[9C99%[1;7H[?12l[?25h[?25l[1;40r[1;1H[L[1;41r[41;59H[K[41;59H150,2[9C98%[1;2H[?12l[?25h[?25l[1;40r[1;1H[L[1;41r[1;3H[32mconst[m [32mdouble[m aspect_ratio = ([32mdouble[m)width/height;[41;59H[K[41;59H149,7[9C98%[1;7H[?12l[?25h[?25l[1;40r[1;1H[2L[1;41r[1;3HcudaMallocManaged(&d_pic, num_frames * height * width * [38;5;130msizeof[m([32munsigned[m [32mchh[2;1Har[m));[41;59H[K[41;59H148,7[9C96%[1;7H[?12l[?25h[?25l[1;40r[1;1H[2L[1;41r[1;3H[32munsigned[m [32mchar[m *pic = ([32munsigned[m [32mchar[m * ) malloc(num_frames * height * widthh[2;1H * [38;5;130msizeof[m([32munsigned[m [32mchar[m));[41;59H[K[41;59H147,7[9C95%[1;7H[?12l[?25h[?25l[1;40r[1;1H[L[1;41r[1;3H[32munsigned[m [32mchar[m *d_pic;[41;59H[K[41;59H146,7[9C94%[1;7H[?12l[?25h[?25l[1;40r[1;1H[L[1;41r[1;3H[34m/* allocate image array */[m[41;59H[K[41;59H145,7[9C94%[1;7H[?12l[?25h[?25l[1;40r[1;1H[L[1;41r[41;59H[K[41;59H144,0-1[7C93%[1;1H[?12l[?25h[?25l[1;40r[1;1H[2L[1;41r[1;3Hprintf([31m"Computing [m[35m%d[m[31m frames of [m[35m%d[m[31m by [m[35m%d[m[31m fractal[m[35m\n[m[31m"[m, num_frames, width, heii[2;1Hght);[41;59H[K[41;59H143,7[9C92%[1;7H[?12l[?25h[?25l[1;40r[1;1H[2L[1;41r[1;3H[38;5;130mif[m (num_frames < [31m1[m) {fprintf([31mstderr[m, [31m"error: num_frames must be at least 11[m[2;1H[35m\n[m[31m"[m); exit(-[31m1[m);}[41;59H[K[41;59H142,7[9C90%[1;7H[?12l[?25h[?25l[1;40r[1;1H[L[1;41r[1;3H[32mint[m num_frames = atoi(argv[[31m3[m]);[40;1H[94m@                                                                           [m[41;59H[K[41;59H141,7[9C90%[1;7H[?12l[?25h[?25l[1;40r[1;1H[2L[1;41r[1;3H[38;5;130mif[m (height < [31m10[m) {fprintf([31mstderr[m, [31m"error: height must be at least 10[m[35m\n[m[31m"[m);  [2;1Hexit(-[31m1[m);}[41;59H[K[41;59H140,7[9C89%[1;7H[?12l[?25h[?25l[1;40r[1;1H[L[1;41r[1;3H[32mint[m height = atoi(argv[[31m2[m]);[41;59H[K[41;59H139,7[9C89%[1;7H[?12l[?25h[?25l[1;40r[1;1H[2L[1;41r[1;3H[38;5;130mif[m (width < [31m10[m) {fprintf([31mstderr[m, [31m"error: width must be at least 10[m[35m\n[m[31m"[m); exx[2;1Hit(-[31m1[m);}[41;59H[K[41;59H138,7[9C87%[1;7H[?12l[?25h[?25l[1;40r[1;1H[L[1;41r[1;3H[32mint[m width = atoi(argv[[31m1[m]);[41;59H[K[41;59H137,7[9C87%[1;7H[?12l[?25h[?25l[1;40r[1;1H[2L[1;41r[1;3H[38;5;130mif[m (argc != [31m4[m) {fprintf([31mstderr[m, [31m"usage: [m[35m%s[m[31m height width num_frames[m[35m\n[m[31m"[m, argg[2;1Hv[[31m0[m]); exit(-[31m1[m);}[41;59H[K[41;59H136,7[9C85%[1;7H[?12l[?25h[?25l[1;40r[1;1H[L[1;41r[1;3H[34m/* read command line arguments */[m[41;59H[K[41;59H135,7[9C85%[1;7H[?12l[?25h[?25l[1;40r[1;1H[L[1;41r[41;59H[K[41;59H134,0-1[7C84%[1;1H[?12l[?25h[?25l[1;40r[1;1H[L[1;41r[1;3Hprintf([31m"Fractal v1.6 [serial][m[35m\n[m[31m"[m);[41;59H[K[41;59H133,7[9C84%[1;7H[?12l[?25h[?25l[1;40r[1;1H[L[1;41r[41;59H[K[41;59H132,0-1[7C83%[1;1H[?12l[?25h[?25l[1;40r[1;1H[L[1;41r[1;3H[32mdouble[m start, end;[41;59H[K[41;59H131,7[9C82%[1;7H[?12l[?25h[?25l[1;40r[1;1H[L[1;41r[1;1H[32mint[m main([32mint[m argc, [32mchar[m *argv[]) {[40;1H[94m@                                                                           [m[41;59H[K[41;59H130,7[9C82%[1;7H[?12l[?25h[?25l[1;40r[1;1H[L[1;41r[41;59H[K[41;59H129,0-1[7C82%[1;1H[?12l[?25h[?25l[1;40r[1;1H[L[1;41r[41;59H[K[41;59H128,0-1[7C81%[1;1H[?12l[?25h[?25l[1;40r[1;1H[L[1;41r[1;1H}[41;59H[K[41;59H127,1[9C80%[1;1H[?12l[?25h[?25l[1;40r[1;1H[L[1;41r[1;3H}[41;59H[K[41;59H126,4[9C80%[1;4H[?12l[?25h[?25l[1;40r[1;1H[L[1;41r[1;9Hpic[index] = ([32munsigned[m [32mchar[m) depth;[40;1H[94m@                                                                           [m[41;59H[K[41;59H125,3-8[7C79%[1;8H[?12l[?25h[?25l[1;40r[1;1H[L[1;41r[1;9H[34m//printf("Editing Index: %d\n", index);[m[41;59H[K[41;59H124,7[9C79%[1;7H[?12l[?25h[?25l[1;40r[1;1H[L[1;41r[1;9H[32mint[m index = frame * height * width + row * width + col;[41;59H[K[41;59H123,1-8[7C78%[1;8H[?12l[?25h[?25l[1;40r[1;1H[L[1;41r[1;9H[34m// frame * height * width + row * width + col[m[41;59H[K[41;59H122,1-8[7C78%[1;8H[?12l[?25h[?25l[1;40r[1;1H[L[1;41r[1;3H[38;5;130mif[m (frame < frames && row < height && col < width) {[40;1H[94m@                                                                           [m[41;59H[K[41;59H121,7[9C77%[1;7H[?12l[?25h[?25l[1;40r[1;1H[L[1;41r[41;59H[K[41;59H120,1[9C77%[1;1H[?12l[?25h[?25l[1;40r[1;1H[L[1;41r[1;3H} [38;5;130mwhile[m ((depth > [31m0[m) && ((x2 + y2) < [31m5.0[m));[41;59H[K[41;59H119,7[9C76%[1;7H[?12l[?25h[?25l[1;40r[1;1H[L[1;41r[1;5Hdepth--;[41;59H[K[41;59H118,7[9C75%[1;7H[?12l[?25h[?25l[1;40r[1;1H[L[1;41r[1;5Hx = x2 - y2 + cx;[41;59H[K[41;59H117,7[9C75%[1;7H[?12l[?25h[?25l[1;40r[1;1H[L[1;41r[1;5Hy = [31m2[m * x * y + cy;[41;59H[K[41;59H116,7[9C74%[1;7H[?12l[?25h[?25l[1;40r[1;1H[L[1;41r[1;5Hy2 = y * y;[40;1H[94m@                                                                           [m[41;59H[K[41;59H115,7[9C74%[1;7H[?12l[?25h[?25l[1;40r[1;1H[L[1;41r[1;5Hx2 = x * x;[41;59H[K[41;59H114,7[9C73%[1;7H[?12l[?25h[?25l[7;40r[7;1H[L[1;41r[1;3H[38;5;130mdo[m [106m{[m[1;8H[K[2;5Hx2 = x * x[3;6H2 = y * y;[3;17H[K[4;5Hy = [31m2[m * x * y + cy;
    x = x2 - y2 + cx;
    depth--;[6;13H[K[7;3H[106m}[m [38;5;130mwhile[m ((depth > [31m0[m) && ((x2 + y2) < [31m5.0[m));[40;1H[94m@                                                                           [m[41;59H[K[41;59H113,6[9C73%[1;6H[?12l[?25h[?25l[1;40r[1;1H[L[1;41r[1;3H[32mdouble[m x2, y2;[2;6H{[8;3H}[41;59H[K[41;59H112,7[9C73%[1;7H[?12l[?25h[?25l[1;40r[1;1H[L[1;41r[41;59H[K[41;59H111,2[9C72%[1;2H[?12l[?25h[?25l[1;40r[1;1H[L[1;41r[1;3H[32mint[m depth = [31m256[m;[41;59H[K[41;59H110,7[9C71%[1;7H[?12l[?25h[?25l[1;40r[1;1H[L[1;41r[1;3H[32mdouble[m y = cy;[41;59H[K[41;59H109,7[9C71%[1;7H[?12l[?25h[?25l[41;60H10[2;7H[?12l[?25h[?25l[41;61H1,2[3;2H[?12l[?25h[?25l[41;61H2,7[4;7H[?12l[?25h[?25l[5;6H[106m{[11;3H}[m[41;61H3,6[5;6H[?12l[?25h[?25l{[11;3H}[41;61H4,7[6;7H[?12l[?25h[?25l[41;61H5[7;7H[?12l[?25h[?25l[41;61H6[8;7H[?12l[?25h[?25l[41;61H7[9;7H[?12l[?25h[?25l[41;61H8[10;7H[?12l[?25h[?25l[41;61H9[11;7H[?12l[?25h[?25l[41;60H20,1[12;1H[?12l[?25h[?25l[41;61H1,7[13;7H[?12l[?25h[?25l[41;61H2,1-8[14;8H[?12l[?25h[?25l[41;61H3[15;8H[?12l[?25h[?25l[41;61H4,7  [16;7H[?12l[?25h[?25l[41;61H5,3-8[17;8H[?12l[?25h[?25l[41;61H6,4  [18;4H[?12l[?25h[?25l[41;61H7,1[19;1H[?12l[?25h[?25l[41;61H8,0-1[20;1H[?12l[?25h[?25l[41;61H9[21;1H[?12l[?25h[?25l[41;60H30,7  [22;7H[?12l[?25h[?25l[41;61H1[23;7H[?12l[?25h[?25l[41;61H2,0-1[24;1H[?12l[?25h[?25l[41;61H3,7  [25;7H[?12l[?25h[?25l[41;61H4,0-1[26;1H[?12l[?25h[?25l[41;61H5,7  [27;7H[?12l[?25h[?25l[41;61H6[28;7H[?12l[?25h[?25l[41;61H7[30;7H[?12l[?25h[?25l[41;61H8[31;7H[?12l[?25h[?25l[41;61H9[33;7H[?12l[?25h[?25l[41;60H40[34;7H[?12l[?25h[?25l[41;61H1[36;7H[?12l[?25h[?25l[41;61H2[37;7H[?12l[?25h[?25l[41;61H3[39;7H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[41;59H[K[41;59H144,0-1[7C71%[40;1H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[40;3H[34m/* allocate image array */[m[41;59H[K[41;59H145,7[9C72%[40;7H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[40;3H[32munsigned[m [32mchar[m *d_pic;[41;59H[K[41;59H146,7[9C73%[40;7H[?12l[?25h[?25l[1;40r[1;1H[2M[1;41r[39;3H[32munsigned[m [32mchar[m *pic = ([32munsigned[m [32mchar[m * ) malloc(num_frames * height * widthh[40;1H * [38;5;130msizeof[m([32munsigned[m [32mchar[m));[41;59H[K[41;59H147,7[9C73%[39;7H[?12l[?25h[?25l[1;40r[1;1H[2M[1;41r[39;3HcudaMallocManaged(&d_pic, num_frames * height * width * [38;5;130msizeof[m([32munsigned[m [32mchh[40;1Har[m));[41;59H[K[41;59H148,7[9C74%[39;7H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[40;3H[32mconst[m [32mdouble[m aspect_ratio = ([32mdouble[m)width/height;[41;59H[K[41;59H149,7[9C75%[40;7H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[41;59H[K[41;59H150,2[9C75%[40;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[40;3H[34m// Parallel Program Run time[m[41;59H[K[41;59H151,7[9C76%[40;7H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[40;3H[32mdim3[m [36mblockDim[m([31m32[m, [31m32[m, [31m1[m);[41;59H[K[41;59H152,7[9C77%[40;7H[?12l[?25h[?25l[1;40r[1;1H[2M[1;41r[39;3H[32mdim3[m [36mgridDim[m((width + [36mblockDim[m.x - [31m1[m) / [36mblockDim[m.x, (height + [36mblockDim[m.y --[40;1H [31m1[m)/ [36mblockDim[m.y, num_frames);[41;59H[K[41;59H153,7[9C78%[39;7H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[41;59H[K[41;59H154,3[9C78%[40;3H[?12l[?25h[?25l[41;59H[K[41;1H:[?12l[?25hq[?25l[41;1H[K[41;1H[?1l>[?12l[?25h[?1049l]0;jpacheco@:~/fractal[jpacheco@r2v02 fractal]$ vim fractal.culs[Kclear[3Plsvim fractal.cu[K./fractal  _  cuda 200 200         100 100 10
Fractal v1.6 [serial]
Computing 10 frames of 100 by 100 fractal
Parallel compute time: 0.000441 s
Serial compute time: 0.060176 s
]0;jpacheco@:~/fractal[jpacheco@r2v02 fractal]$ ./fractal_cuda 100 100 10  [1P[1P[1P[1@2[1@9[1@9[1P[1P[1@0[1@0 1[1P[1@200 20  
Fractal v1.6 [serial]
Computing 20 frames of 200 by 200 fractal
Parallel compute time: 0.000926 s
Serial compute time: 0.443935 s
]0;jpacheco@:~/fractal[jpacheco@r2v02 fractal]$ ./fractal_cuda 200 200 200[1P[1P[1P[1@4[1@0[1@0 [1@ [1P 200[1P[1P[1P[1@4[1@0[1@0 2[1P030 400 30  25
Fractal v1.6 [serial]
Computing 25 frames of 400 by 400 fractal
Parallel compute time: 0.003043 s
Serial compute time: 2.179894 s
]0;jpacheco@:~/fractal[jpacheco@r2v02 fractal]$ ./fractal_cuda 400 400 25[1P[1P[1P[1@6[1@0[1@0 400[1P[1P[1P[1@6[1@0[1@0 25  30  
Fractal v1.6 [serial]
Computing 30 frames of 600 by 600 fractal
Parallel compute time: 0.007018 s
Serial compute time: 5.788709 s
]0;jpacheco@:~/fractal[jpacheco@r2v02 fractal]$ ./fractal_cuda 600 600 300[1P[1P[1P[1@8[1@0[1@0 600[1P[1P[1P[1P[1@8[1P [1@ [1@8[1@0[1@0 30  35
Fractal v1.6 [serial]
Computing 35 frames of 800 by 800 fractal
Parallel compute time: 0.014424 s
Serial compute time: 11.826075 s
]0;jpacheco@:~/fractal[jpacheco@r2v02 fractal]$ ./fractal_cuda 800 800 350 [1P[1P[1P[1@1[1@0[1@0[1@0 800[1P[1P[1P0[1P[1P[1P[1@2[1@0[1@0 [1@1[1@2[1@0[1@0[1P[1P[1P[1P[1@9[1@0[1@0 35  40
Fractal v1.6 [serial]
Computing 40 frames of 1200 by 900 fractal
Parallel compute time: 0.026260 s
Serial compute time: 22.528897 s
]0;jpacheco@:~/fractal[jpacheco@r2v02 fractal]$ ./fractal_cuda 1200 900 400[1P[1P[1P[1P[1@1[1@5[1@0[1@0 900[1P[1P[1P[1P[1@1[1@9[1@8[1@0 900[1P[1P[1P[1@1[1@0[1@8[1@0 40 5
Fractal v1.6 [serial]
Computing 45 frames of 1980 by 1080 fractal
Parallel compute time: 0.056408 s
Serial compute time: 51.906047 s
]0;jpacheco@:~/fractal[jpacheco@r2v02 fractal]$ ./fractal_cuda 1980 1080 45 1080[1P[1P[1P[1@6[1@0[1@00[1P[1P[1P[1P[1@2[1@4[1@0[1@0 1600[1P[1P[1P[1@3[1@0[1@0 45  50
Fractal v1.6 [serial]
Computing 50 frames of 2400 by 1300 fractal
Parallel compute time: 0.101372 s
Serial compute time: 84.649127 s
]0;jpacheco@:~/fractal[jpacheco@r2v02 fractal]$ ./fractal_cuda 2400 1300 50 2400[1P[1P[1P[1@8[1@0[1@0 1300[1P[1P[1P[1@6[1@0[1@0 [1P[1P[1P[1P[1@3[1@4[1@0[1@0[1@0[1P 1600 50 5
Fractal v1.6 [serial]
Computing 55 frames of 3400 by 1600 fractal
Parallel compute time: 0.173425 s
Serial compute time: 172.770957 s
]0;jpacheco@:~/fractal[jpacheco@r2v02 fractal]$ ./fractal_cuda 3400 1600 550[1P[1P[1P[1P[1@4[1@0[1@9[1@6 1600[1P[1P[1P[1P[1@2[1@1[1@6[1@0 55  60
Fractal v1.6 [serial]
Computing 60 frames of 4096 by 2160 fractal
Parallel compute time: 0.298631 s
Serial compute time: 285.547620 s
]0;jpacheco@:~/fractal[jpacheco@r2v02 fractal]$ exit
exit

Script done on Mon Dec  2 15:32:54 2024
